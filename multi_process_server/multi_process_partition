#include<stdlib.h>
#include<stdio.h>
#include<sys/socket.h>
#include<unistd.h>
#include<sys/wait.h>
#include<signal.h>
#include<arpa/inet.h>
#include<string.h>

#define SIZE 30
void error_handling(char* msg);
void read_routine(int sock,char* buf)
{
    while(1){
        int str_len=read(sock,buf,SIZE);
        if(str_len==0)
            return;
        
        buf[str_len]=0;
        printf("message from server : %s \n",buf);
    }
}
void write_routine(int sock,char* buf)
{
    while(1){
        fgets(buf,SIZE,stdin);
        if(!strcmp(buf,"q\n") || !strcmp(buf,"Q\n")){
            shutdown(sock,SHUT_WR);
            return ;
        }
        write(sock,buf,strlen(buf));
    }
}

int main(int argc,char* argv[])
{

    int sock;
    pid_t pid;

    char buf[SIZE];
    struct sockaddr_in ser_adr;

    sock=socket(PF_INET,SOCK_STREAM,0);
    memset(&ser_adr,0,sizeof(ser_adr));
    ser_adr.sin_family=PF_INET;
    ser_adr.sin_addr.s_addr=inet_addr(argv[1]);
    ser_adr.sin_port=htons(atoi(argv[2]));

    if(connect(sock,(struct sockaddr)&ser_adr,sizeof(ser_adr))==-1)
        error_handling("connect error ! \n");

    pid=fork();
    if(pid==0){
        write_routine(sock,buf);
    }
    else
    {
        read_routine(sock,buf);
    }

    close(sock);





    return 0;
}